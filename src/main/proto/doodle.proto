syntax = "proto3";

option java_package = "com.bushpath.doodle.protobuf";
option java_outer_classname = "DoodleProtos";
option java_generate_equals_and_hash = true;

/**
 * Message Type
 */ 

enum MessageType {
    CONTROL_LIST = 0;
    CONTROL_SHOW = 1;
    FAILURE = 2;
    FILE_CREATE = 3;
    FILE_DELETE = 4;
    FILE_LIST = 5;
    FILE_MKDIR = 6;
    GOSSIP = 7;
    JOURNAL_OPERATION = 8;
    JOURNAL_WRITE = 9;
    JOURNAL_WRITE_SEARCH = 10;
    NODE_LIST = 11;
    NODE_SHOW = 12;
    PIPE_CLOSE = 13;
    PIPE_OPEN = 14;
    PIPE_WRITE = 15;
    PLUGIN_LIST = 16;
    QUERY = 17;
    SKETCH_LIST = 18;
    SKETCH_SHOW = 19;
    SKETCH_WRITE = 20;
}

/**
 * Control Messages
 */

message ControlListRequest {
}

message ControlListResponse {
    map<string, string> plugins = 1;
}

message ControlShowRequest {
    string id = 1;
}

message ControlShowResponse {
    string plugin = 1;    
    bool frozen = 2;
    repeated Variable variables = 3;
}

/**
 * File Messages
 */

message FileCreateRequest {
    string user = 1;
    string group = 2;
    string path = 3;
    FileFormat fileFormat = 4;
    string sketchId = 5;
    bytes query = 6;
}

message FileCreateResponse {
}

message FileDeleteRequest {
    string user = 1;
    string group = 2;
    string path = 3;
}

message FileDeleteResponse {
}

message FileListRequest {
    string user = 1;
    string group = 2;
    string path = 3;
}

message FileListResponse {
    repeated File files = 1;
}

message FileMkdirRequest {
    string user = 1;
    string group = 2;
    string path = 3;
}

message FileMkdirResponse {
}

/**
 * Gossip Messages
 */

message GossipRequest {
    Node node = 1;
    int32 nodesHash = 2;
    int64 operationTimestamp = 3;
}

message GossipResponse {
    repeated Node nodes = 1;
    repeated Operation operations = 2;
}

message JournalOperationRequest {
    repeated Operation operations = 1;
}

message JournalOperationResponse {
}

message JournalWriteRequest {
    int32 nodeId = 1;
    string sketchId = 2;
    bytes data = 3;
}

message JournalWriteResponse {
}

message JournalWriteSearchRequest {
    map<string, int64> sketches = 1;
}

message JournalWriteSearchResponse {
    repeated WriteUpdate writeUpdates = 1;
}

message WriteUpdate {
    string sketchId = 1;
    map<int64, bytes> data = 2;
}

/**
 * Node Messages
 */

message NodeListRequest {
}

message NodeListResponse {
    repeated Node nodes = 1;
}

message NodeShowRequest {
    int32 id = 1;
}

message NodeShowResponse {
    Node node = 1;
}

/**
 * Pipe Messages
 */

message PipeCloseRequest {
    int32 id = 1;
}

message PipeCloseResponse {
}

message PipeOpenRequest {
    string sketchId = 1;
    repeated string features = 2;
    int32 transformThreadCount = 3;
    int32 distributorThreadCount = 4;
    int32 bufferSize = 5;
}

message PipeOpenResponse {
    int32 id = 1;
    repeated int32 featureIndexes = 2;
}

message PipeWriteRequest {
    int32 id = 1;
    bytes data = 2;
}

message PipeWriteResponse {
}

/**
 * Plugin Messages
 */

message PluginListRequest {
} 

message PluginListResponse {
    repeated string controlPlugins = 1;
    repeated string sketchPlugins = 2;
}

/**
 * Query Messages
 */

message QueryRequest {
    bytes query = 1;
    int32 nodeId = 2;
    int32 bufferSize = 4;
}

message QueryResponse {
    bytes data = 1;
    bool lastMessage = 2;
}

/**
 * Sketch Messages
 */

message SketchListRequest {
}

message SketchListResponse {
    map<string, string> plugins = 1;
}

message SketchShowRequest {
    string id = 1;
}

message SketchShowResponse {
    string plugin = 1;    
    bool frozen = 2;
    string inflatorClass = 3;
    repeated Variable variables = 4;
}

message SketchWriteRequest {
    int32 nodeId = 1;
    string sketchId = 2;
    bytes data = 3;
}

message SketchWriteResponse {
}

/**
 * Miscellaneous Messages
 */

message File {
    int32 inode = 1;
    FileType fileType = 2;
    string user = 3;
    string group = 4;
    string name = 5;
    int64 size = 6;
    int64 changeTime = 7;
    int64 modificationTime = 8;
    int64 accessTime = 9;

    FileFormat fileFormat = 10;
    bytes query = 11;
    map<int32, int32> observations = 12;
}

enum FileType {
    DIRECTORY = 0;
    REGULAR = 1;
}

enum FileFormat {
    BINARY = 0;
    CSV = 1;
}

message FileOperation {
    int64 timestamp = 1; 
    string path = 2;
    File file = 3;
    OperationType operationType = 4;
}

message Failure {
    string type = 1;
    string text = 2;
}

message Node {
    int32 id = 1;
    string ipAddress = 2;
    int32 port = 3;
    int32 namenodeIpcPort = 4;
    int32 datanodeXferPort = 5;
    int32 datanodeIpcPort = 6;
    int32 datanodeInfoPort = 7;
}

message Operation {
    // operation metadata
    int64 timestamp = 1;
    OperationType operationType = 2;
    string pluginId = 3;

    // add / delete operation
    Variable variable = 4;

    // init operation
    PluginType pluginType = 5;
    string pluginClass = 6;
    string controlPluginId = 7;
}

enum OperationType {
    ADD = 0;
    DELETE = 1;
    INIT = 2;
}

enum PluginType {
    CONTROL = 0;
    SKETCH = 1;
}

message Variable {
    string type = 1;
    string name = 2;
    repeated string values = 3;
}
