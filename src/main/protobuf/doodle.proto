syntax = "proto3";

option java_package = "com.bushpath.doodle.protobuf";
option java_outer_classname = "DoodleProtos";
option java_generate_equals_and_hash = true;

/**
 * Message Type
 */ 

enum MessageType {
    CONTROL_INIT = 0;
    CONTROL_LIST = 1;
    CONTROL_MODIFY = 2;
    CONTROL_SHOW = 3;
    FAILURE = 4;
    GOSSIP_HASH = 5;
    GOSSIP_UPDATE = 6;
    NODE_LIST = 7;
    NODE_SHOW = 8;
    PIPE_CLOSE = 9;
    PIPE_OPEN = 10;
    PIPE_WRITE = 11;
    PLUGIN_LIST = 12;
    QUERY = 13;
    SKETCH_INIT = 14;
    SKETCH_CHECKPOINT = 15;
    SKETCH_LIST = 16;
    SKETCH_MODIFY = 17;
    SKETCH_ROLLBACK = 18;
    SKETCH_SHOW = 19;
    SKETCH_WRITE = 20;
}

/**
 * Control Messages
 */

message ControlInitRequest {
    string id = 1;
    string plugin = 2;
}

message ControlInitResponse {
}

message ControlListRequest {
}

message ControlListResponse {
    map<string, string> plugins = 1;
}

message ControlModifyRequest {
    string id = 1;
    repeated VariableOperation operations = 2;
}

message ControlModifyResponse {
}

message ControlShowRequest {
    string id = 1;
}

message ControlShowResponse {
    string plugin = 1;    
    repeated PluginVariable variables = 2;
}

/**
 * Gossip Messages
 */

message GossipHashRequest {
}

message GossipHashResponse {
    int32 nodesHash = 1;
    int32 controlHash = 2;
    int32 sketchHash = 3;
    int32 checkpointHash = 4;
}

message GossipUpdateRequest {
    repeated Node nodes = 1;
    repeated ControlPluginGossip controlPlugins = 2;
    repeated SketchPluginGossip sketchPlugins = 3;
    repeated Checkpoint checkpoints = 4;
}

message GossipUpdateResponse {
}

message ControlPluginGossip {
    string id = 1;
    string classpath = 2;
    repeated VariableOperation operations = 3;
}

message SketchPluginGossip {
    string id = 1;
    string classpath = 2;
    repeated string controlPlugins = 3;
    repeated VariableOperation operations = 4;
}

/**
 * Node Messages
 */

message NodeListRequest {
}

message NodeListResponse {
    repeated Node nodes = 1;
}

message NodeShowRequest {
    int32 id = 1;
}

message NodeShowResponse {
    Node node = 1;
}

/**
 * Pipe Messages
 */

message PipeCloseRequest {
    int32 id = 1;
}

message PipeCloseResponse {
}

message PipeOpenRequest {
    string sketchId = 1;
    repeated string features = 2;
    int32 transformThreadCount = 3;
    int32 distributorThreadCount = 4;
    int32 bufferSize = 5;
}

message PipeOpenResponse {
    int32 id = 1;
    repeated int32 featureIndexes = 2;
}

message PipeWriteRequest {
    int32 id = 1;
    bytes data = 2;
}

message PipeWriteResponse {
}

/**
 * Plugin Messages
 */

message PluginListRequest {
} 

message PluginListResponse {
    repeated string controlPlugins = 1;
    repeated string sketchPlugins = 2;
}

/**
 * Query Messages
 */

message QueryRequest {
    bytes query = 1;
    int32 bufferSize = 2;
}

message QueryResponse {
    bytes data = 1;
    bool lastMessage = 2;
}

/**
 * Sketch Messages
 */

message SketchInitRequest {
    string id = 1;
    string plugin = 2;
    repeated string controlPlugins = 3;
}

message SketchInitResponse {
}

message SketchCheckpointRequest {
    string sketchId = 1;
    string checkpointId = 2;
}

message SketchCheckpointResponse {
    Checkpoint checkpoint = 1;
}

message SketchListRequest {
}

message SketchListResponse {
    map<string, string> plugins = 1;
}

message SketchModifyRequest {
    string id = 1;
    repeated VariableOperation operations = 2;
}

message SketchModifyResponse {
}

message SketchRollbackRequest {
    string sketchId = 1;
    string checkpointId = 2;
}

message SketchRollbackResponse {
}

message SketchShowRequest {
    string id = 1;
}

message SketchShowResponse {
    string plugin = 1;    
    string inflatorClass = 2;
    int64 observationCount = 3;
    repeated PluginVariable variables = 4;
    repeated Checkpoint checkpoints = 5;
}

message SketchWriteRequest {
    int32 nodeId = 1;
    string sketchId = 2;
    bytes data = 3;
}

message SketchWriteResponse {
}

/**
 * Miscellaneous Messages
 */

message Replica {
    Node primaryReplica = 1;
    repeated Node secondaryReplicas = 2;
}

message Checkpoint {
    int64 timestamp = 1;
    string sketchId = 2;
    string checkpointId = 3;
    repeated Replica replicas = 4;
}

message Failure {
    string type = 1;
    string text = 2;
}

message Node {
    int32 id = 1;
    string ipAddress = 2;
    int32 port = 3;
}

message PluginVariable {
    string type = 1;
    string name = 2;
    repeated string values = 3;
}

message VariableOperation {
    int64 timestamp = 1;
    Operation operation = 2;
    PluginVariable variable = 3;

    enum Operation {
        ADD = 0;
        DELETE = 1;
    }
}
